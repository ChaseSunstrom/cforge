# CMakeLists.txt for cforge v2.0.0
# Generated by cforge - C++ project management tool

cmake_minimum_required(VERSION 3.14)

# Project configuration
project(cforge VERSION 2.0.0 LANGUAGES CXX)

# Set source directory
set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

# Project description
set(PROJECT_DESCRIPTION "A C/C++ build tool with dependency management")
set(PROJECT_AUTHOR "Chase Sunstrom <casunstrom@gmail.com>")

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Build configurations
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

message(STATUS "Building with ${CMAKE_BUILD_TYPE} configuration")

# Configure output directories
if(DEFINED CMAKE_CONFIGURATION_TYPES)
  foreach(cfg IN LISTS CMAKE_CONFIGURATION_TYPES)
    string(TOUPPER ${cfg} CFG_UPPER)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFG_UPPER} "${CMAKE_BINARY_DIR}/lib/${cfg}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFG_UPPER} "${CMAKE_BINARY_DIR}/lib/${cfg}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFG_UPPER} "${CMAKE_BINARY_DIR}/bin/${cfg}")
  endforeach()
else()
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE}")
endif()

# Git dependencies
include(FetchContent)
# Ensure dependencies directory exists
set(DEPS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/deps")
file(MAKE_DIRECTORY ${DEPS_DIR})

# fmt dependency
message(STATUS "Setting up fmt dependency from https://github.com/fmtlib/fmt.git")
FetchContent_Declare(fmt
    GIT_REPOSITORY https://github.com/fmtlib/fmt.git
    GIT_TAG 11.1.4
    SOURCE_DIR ${DEPS_DIR}/fmt
)
# Include directories for fmt
include_directories(${DEPS_DIR}/fmt/include)
include_directories(${DEPS_DIR}/fmt/.)

# For fmt, we need to build the library
set(FMT_TEST OFF CACHE BOOL "" FORCE)
set(FMT_DOC OFF CACHE BOOL "" FORCE)
set(FMT_SYSTEM_HEADERS ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(fmt)

# tomlplusplus dependency
message(STATUS "Setting up tomlplusplus dependency from https://github.com/marzer/tomlplusplus.git")
FetchContent_Declare(tomlplusplus
    GIT_REPOSITORY https://github.com/marzer/tomlplusplus.git
    GIT_TAG v3.4.0
    SOURCE_DIR ${DEPS_DIR}/tomlplusplus
)
# Include directories for tomlplusplus
include_directories(${DEPS_DIR}/tomlplusplus/include)
include_directories(${DEPS_DIR}/tomlplusplus/.)

FetchContent_MakeAvailable(tomlplusplus)

# Add source files
file(GLOB_RECURSE SOURCES
    "${SOURCE_DIR}/src/*.cpp"
    "${SOURCE_DIR}/src/*.c"
)

# Add target
add_executable(${PROJECT_NAME} ${SOURCES})

# Include directories
target_include_directories(${PROJECT_NAME} PUBLIC
    "${SOURCE_DIR}/include"
)

# Definitions for config 'Debug'
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  target_compile_definitions(${PROJECT_NAME} PUBLIC DEBUG=1)
  target_compile_definitions(${PROJECT_NAME} PUBLIC FMT_HEADER_ONLY=ON)
endif()

# Link libraries
target_link_libraries(${PROJECT_NAME} PUBLIC
    ${CMAKE_THREAD_LIBS_INIT}
    fmt::fmt
    tomlplusplus::tomlplusplus
)

# Compiler options
if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4)
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Wpedantic)
endif()

# Tests
# No tests directory found

# Installation
include(GNUInstallDirs)
install(TARGETS ${PROJECT_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

if(MSVC AND CMAKE_BUILD_TYPE STREQUAL "Debug")
    install(FILES "${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE}/$<TARGET_FILE_NAME:${PROJECT_NAME}>.pdb"
            DESTINATION ${CMAKE_INSTALL_BINDIR}
            CONFIGURATIONS Debug)
endif()

# CPack configuration
set(CPACK_PACKAGE_NAME ${PROJECT_NAME})
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_VENDOR "${PROJECT_AUTHOR}")
set(CPACK_PACKAGE_CONTACT "${PROJECT_AUTHOR}")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "${PROJECT_AUTHOR}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_DESCRIPTION}")
set(CPACK_RESOURCE_FILE_LICENSE "${SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${SOURCE_DIR}/README.md")

# OS-specific settings
if(WIN32)
    set(CPACK_GENERATOR "ZIP;NSIS")
    set(CPACK_NSIS_MODIFY_PATH ON)
elseif(APPLE)
    set(CPACK_GENERATOR "ZIP;TGZ")
else()
    set(CPACK_GENERATOR "ZIP;TGZ;DEB")
endif()

# Binary packages with config
set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_NAME}-${CMAKE_BUILD_TYPE}")

# Component-based installation
set(CPACK_COMPONENTS_ALL Runtime Development)
set(CPACK_COMPONENT_RUNTIME_DISPLAY_NAME "Runtime Files")
set(CPACK_COMPONENT_DEVELOPMENT_DISPLAY_NAME "Development Files")
set(CPACK_COMPONENT_RUNTIME_DESCRIPTION "Runtime libraries and executables")
set(CPACK_COMPONENT_DEVELOPMENT_DESCRIPTION "Development headers and libraries")

# Include CPack
include(CPack)
