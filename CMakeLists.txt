cmake_minimum_required(VERSION 3.15)
project(cpp-forge VERSION 0.1.0)

# Generated by cforge - Do not edit manually

# Helper function to expand glob patterns and verify sources exist
function(verify_sources_exist pattern_list output_var)
  set(expanded_sources)
  foreach(pattern ${pattern_list})
    file(GLOB_RECURSE matched_sources ${pattern})
    list(APPEND expanded_sources ${matched_sources})
  endforeach()
  if(NOT expanded_sources)
    message(WARNING "No source files found matching patterns: ${pattern_list}")
  endif()
  set(${output_var} ${expanded_sources} PARENT_SCOPE)
endfunction()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Handle configuration-specific defines
string(TOUPPER "${CMAKE_BUILD_TYPE}" UPPER_CONFIG)
add_compile_definitions(${UPPER_CONFIG}_BUILD=1)
message(STATUS "Building with ${CMAKE_BUILD_TYPE} configuration defines")
# Find and configure pkg-config
find_package(PkgConfig QUIET)

# Export package information
include(CMakePackageConfigHelpers)
set(EXPORT_NAME cpp-forge)

# Setup installation paths
if(WIN32 AND NOT DEFINED CMAKE_INSTALL_PREFIX)
  set(CMAKE_INSTALL_PREFIX "$ENV{ProgramFiles}/${PROJECT_NAME}")
endif()
include(GNUInstallDirs)

# Configuration-specific definitions
message(STATUS "CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}")
# Debug configuration flags
set(CMAKE_C_FLAGS_DEBUG "")
set(CMAKE_CXX_FLAGS_DEBUG "")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DDEBUG=1")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG=1")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /Zi /Od")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Zi /Od")
message(STATUS "Debug C flags: ${CMAKE_C_FLAGS_DEBUG}")
message(STATUS "Debug CXX flags: ${CMAKE_CXX_FLAGS_DEBUG}")
# Release configuration flags
set(CMAKE_C_FLAGS_RELEASE "")
set(CMAKE_CXX_FLAGS_RELEASE "")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DNDEBUG=1")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DNDEBUG=1")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /O2")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /O2")
message(STATUS "Release C flags: ${CMAKE_C_FLAGS_RELEASE}")
message(STATUS "Release CXX flags: ${CMAKE_CXX_FLAGS_RELEASE}")

# Enable multi-config support
if(NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "" FORCE)
endif()

# Source patterns for target default
# Debug output of source patterns for error diagnosis
message(STATUS "Source patterns for default: ${SOURCE_PATTERNS}")
set(SOURCE_PATTERNS "src/**.cpp" "src/**.c" "src/**/**.cpp" "src/**/**.c")
verify_sources_exist("${SOURCE_PATTERNS}" DEFAULT_SOURCES)
message(STATUS "Found source files for default: ${DEFAULT_SOURCES}")
if(NOT DEFAULT_SOURCES)
  # No sources found, using default source
  file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/default_main.cpp" "#include <iostream>\n\nint main(int argc, char* argv[]) {\n    std::cout << \"Hello from default\" << std::endl;\n    return 0;\n}\n")
  set(DEFAULT_SOURCES "${CMAKE_CURRENT_BINARY_DIR}/default_main.cpp")
  message(STATUS "No source files found for default, using default main.cpp")
endif()
add_executable(default ${DEFAULT_SOURCES})
set_target_properties(default PROPERTIES
  OUTPUT_NAME "${PROJECT_NAME}_${TARGET_NAME}_${CMAKE_BUILD_TYPE}"
)
set_property(TARGET default PROPERTY TARGET_NAME "default")
message(STATUS "Executable default will be built as ${PROJECT_NAME}_${TARGET_NAME}_${CMAKE_BUILD_TYPE} in ${CMAKE_BUILD_TYPE} mode")
# Apply configuration-specific defines to target
target_compile_definitions(default PRIVATE $<$<CONFIG:DEBUG>:DEBUG>)
target_compile_definitions(default PRIVATE $<$<CONFIG:RELEASE>:NDEBUG>)

target_include_directories(default PRIVATE "include" "deps" "deps/fmt/include" "deps/tomlplusplus/include")

# Testing support
enable_testing()
add_subdirectory(tests)

# Installation
install(TARGETS default
  RUNTIME DESTINATION bin
  COMPONENT Runtime
)
# Install additional resources
install(DIRECTORY "${CMAKE_SOURCE_DIR}/resources"
  DESTINATION share/${PROJECT_NAME}
  OPTIONAL
  COMPONENT Resources
)

# Packaging with CPack
include(CPack)
set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_VENDOR "cforge User")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${PROJECT_NAME} - ${PROJECT_DESCRIPTION}")
# Create a default description file for CPack
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/CPack.GenericDescription.txt"
"DESCRIPTION\n===========\n\nThis package was created by CForge.")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_BINARY_DIR}/CPack.GenericDescription.txt")
set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
set(CPACK_COMPONENTS_ALL Runtime Resources)
set(CPACK_COMPONENT_RUNTIME_DISPLAY_NAME "Runtime")
set(CPACK_COMPONENT_RESOURCES_DISPLAY_NAME "Resources")
set(CPACK_PACKAGING_INSTALL_PREFIX "/")