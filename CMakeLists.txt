# CMakeLists.txt for cforge v2.0.0
# Generated by cforge - C++ project management tool

cmake_minimum_required(VERSION 3.15)

# Project configuration
project(cforge VERSION 2.0.0 LANGUAGES CXX)

# Set source directory
set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

# Project description
set(PROJECT_DESCRIPTION "A C/C++ build tool with dependency management")
set(PROJECT_AUTHOR "Chase Sunstrom <casunstrom@gmail.com>")

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Build configurations
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

message(STATUS "Building with ${CMAKE_BUILD_TYPE} configuration")

# Configure output directories
if(DEFINED CMAKE_CONFIGURATION_TYPES)
  foreach(cfg IN LISTS CMAKE_CONFIGURATION_TYPES)
    string(TOUPPER ${cfg} CFG_UPPER)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CFG_UPPER} "${CMAKE_BINARY_DIR}/lib/${cfg}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CFG_UPPER} "${CMAKE_BINARY_DIR}/lib/${cfg}")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CFG_UPPER} "${CMAKE_BINARY_DIR}/bin/${cfg}")
  endforeach()
else()
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE}")
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE}")
endif()

# Git dependencies
include(FetchContent)
# Ensure dependencies directory exists
set(DEPS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/vendor")
file(MAKE_DIRECTORY ${DEPS_DIR})

# Configure Git to prefer HTTPS but allow other protocols
set(FETCHCONTENT_GIT_PROTOCOL "https")

# fmt dependency
message(STATUS "Setting up fmt dependency from https://github.com/fmtlib/fmt.git")
FetchContent_Declare(fmt
    GIT_REPOSITORY https://github.com/fmtlib/fmt.git
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/vendor/fmt
)
# Include directories for fmt
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/fmt/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/fmt/.)

# For fmt, configure options
set(FMT_TEST OFF CACHE BOOL "" FORCE)
set(FMT_DOC OFF CACHE BOOL "" FORCE)
set(FMT_SYSTEM_HEADERS ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(fmt)

# tomlplusplus dependency
message(STATUS "Setting up tomlplusplus dependency from https://github.com/marzer/tomlplusplus.git")
FetchContent_Declare(tomlplusplus
    GIT_REPOSITORY https://github.com/marzer/tomlplusplus.git
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/vendor/tomlplusplus
)
# Include directories for tomlplusplus
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/tomlplusplus/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/vendor/tomlplusplus/.)

FetchContent_MakeAvailable(tomlplusplus)

# Add source files
file(GLOB_RECURSE SOURCES
    "${SOURCE_DIR}/src/*.cpp"
    "${SOURCE_DIR}/src/*.c"
)

# Add target
add_executable(${PROJECT_NAME} ${SOURCES})

# Include directories
target_include_directories(${PROJECT_NAME} PUBLIC
    "${SOURCE_DIR}/include"
)

# Definitions for config 'Debug'
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  target_compile_definitions(${PROJECT_NAME} PUBLIC DEBUG=1)
  target_compile_definitions(${PROJECT_NAME} PUBLIC FMT_HEADER_ONLY=ON)
  target_compile_definitions(${PROJECT_NAME} PUBLIC FMT_UNICODE=0)
endif()

# Link libraries
target_link_libraries(${PROJECT_NAME} PUBLIC
    fmt::fmt
    tomlplusplus::tomlplusplus
)

# Compiler options
if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE /W4)
else()
    target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -Wpedantic)
endif()

# Tests
if(BUILD_TESTING)
    enable_testing()
    add_subdirectory("${SOURCE_DIR}/tests" ${CMAKE_BINARY_DIR}/tests)
endif()

# Installation configuration
include(GNUInstallDirs)

install(TARGETS ${PROJECT_NAME}
    RUNTIME
        DESTINATION ${CMAKE_INSTALL_BINDIR}
        COMPONENT Runtime
    LIBRARY
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
        COMPONENT Runtime
    ARCHIVE
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
        COMPONENT Runtime
)

if(MSVC AND CMAKE_BUILD_TYPE STREQUAL "Debug")
    install(FILES "$<TARGET_PDB_FILE:${PROJECT_NAME}>"
            DESTINATION ${CMAKE_INSTALL_BINDIR}
            COMPONENT Debug
            OPTIONAL
    )
endif()

# CPack configuration
set(CPACK_PACKAGE_NAME "${PROJECT_NAME}")
set(CPACK_PACKAGE_VENDOR "Chase Sunstrom")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A C/C++ build tool with dependency management")
set(CPACK_PACKAGE_VERSION "2.0.0")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")

set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_NAME}-${CMAKE_BUILD_TYPE}")
set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)
set(CPACK_DEB_COMPONENT_INSTALL ON)
set(CPACK_RPM_COMPONENT_INSTALL ON)

# Package components
set(CPACK_COMPONENTS_ALL runtime)

set(CPACK_COMPONENT_RUNTIME_DISPLAY_NAME "Runtime Files")
set(CPACK_COMPONENT_RUNTIME_DESCRIPTION "Runtime libraries and executables")

if(WIN32)
    set(CPACK_GENERATOR "ZIP;NSIS")
    set(CPACK_NSIS_MODIFY_PATH ON)
    set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
    set(CPACK_NSIS_PACKAGE_NAME "${PROJECT_NAME}")
    set(CPACK_NSIS_DISPLAY_NAME "${PROJECT_NAME}")
    set(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES64")
elseif(APPLE)
    set(CPACK_GENERATOR "ZIP;TGZ")
else()
    set(CPACK_GENERATOR "ZIP;TGZ;DEB")
    set(CPACK_DEBIAN_PACKAGE_MAINTAINER "${CPACK_PACKAGE_VENDOR}")
    set(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
endif()

# Packaging directory settings
set(CPACK_OUTPUT_FILE_PREFIX "${CMAKE_BINARY_DIR}/packages")
set(CPACK_PACKAGING_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")

# Override install prefix for packaging
set(CPACK_INSTALL_PREFIX )
include(CPack)
