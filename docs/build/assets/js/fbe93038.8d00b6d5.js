"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[133],{8453:(t,e,n)=>{n.d(e,{R:()=>c,x:()=>o});var s=n(6540);const r={},i=s.createContext(r);function c(t){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:c(t.components),s.createElement(i.Provider,{value:e},t.children)}},8800:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"testing","title":"Testing","description":"\ud83e\uddea Testing","source":"@site/docs/testing.md","sourceDirName":".","slug":"/testing","permalink":"/cforge/docs/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/chasesunstrom/cforge/edit/main/docs/docs/testing.md","tags":[],"version":"current","frontMatter":{"id":"testing","title":"Testing"},"sidebar":"sidebar","previous":{"title":"Scripts & Hooks","permalink":"/cforge/docs/scripts-hooks"},"next":{"title":"Advanced Topics","permalink":"/cforge/docs/advanced-topics"}}');var r=n(4848),i=n(8453);const c={id:"testing",title:"Testing"},o=void 0,d={},a=[{value:"\ud83e\uddea Testing",id:"-testing",level:2}];function l(t){const e={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"-testing",children:"\ud83e\uddea Testing"}),"\n",(0,r.jsx)(e.p,{children:"CForge integrates with CTest for testing:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-toml",children:'[tests]\r\ndirectory = "tests"\r\nenabled = true\r\ntimeout = 30  # seconds\r\n\r\n[[tests.executables]]\r\nname = "math_tests"\r\nsources = ["tests/math_test.cpp"]\r\nincludes = ["include", "tests/common"]\r\nlinks = ["my_project"]\r\nlabels = ["unit", "math"] \n'})}),"\n",(0,r.jsxs)(e.p,{children:["Example test file (",(0,r.jsx)(e.code,{children:"tests/math_test.cpp"}),"):"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\r\n#include <cassert>\r\n#include "my_project.h"\r\n\r\nvoid test_addition() {\r\n    assert(my_project::add(2, 3) == 5);\r\n    std::cout << "Addition test passed!" << std::endl;\r\n}\r\n\r\nvoid test_multiplication() {\r\n    assert(my_project::multiply(2, 3) == 6);\r\n    std::cout << "Multiplication test passed!" << std::endl;\r\n}\r\n\r\nint main() {\r\n    test_addition();\r\n    test_multiplication();\r\n    std::cout << "All tests passed!" << std::endl;\r\n    return 0;\r\n} \n'})}),"\n",(0,r.jsx)(e.p,{children:"Running tests:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Run all tests\r\ncforge test\r\n\r\n# Run tests with a specific label\r\ncforge test --label unit\r\n\r\n# Run tests matching a pattern\r\ncforge test --filter math\r\n\r\n# Initialize test directory with sample test\r\ncforge test --init\r\n\r\n# Discover tests and update config\r\ncforge test --discover\r\n\r\n# Generate test reports\r\ncforge test --report xml \n"})})]})}function p(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}}}]);