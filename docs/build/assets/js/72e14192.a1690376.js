"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[814],{795:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"quick-start","title":"Quick Start","description":"\u26a1 Quick Start","source":"@site/docs/quick-start.md","sourceDirName":".","slug":"/quick-start","permalink":"/cforge/docs/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/chasesunstrom/cforge/edit/main/docs/docs/quick-start.md","tags":[],"version":"current","frontMatter":{"id":"quick-start","title":"Quick Start"},"sidebar":"sidebar","previous":{"title":"Installation","permalink":"/cforge/docs/installation"},"next":{"title":"Command Reference","permalink":"/cforge/docs/command-reference"}}');var i=t(4848),c=t(8453);const o={id:"quick-start",title:"Quick Start"},a=void 0,l={},s=[{value:"\u26a1 Quick Start",id:"-quick-start",level:2},{value:"Creating a New Project",id:"creating-a-new-project",level:3},{value:"Example Project Structure",id:"example-project-structure",level:3},{value:"Example C++ Code",id:"example-c-code",level:3},{value:"Build and Run",id:"build-and-run",level:3}];function u(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"-quick-start",children:"\u26a1 Quick Start"}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-new-project",children:"Creating a New Project"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create a new project in the current directory\ncforge init\n\n# Create a specific project type\ncforge init --template lib     # Create a library project\ncforge init --template header-only  # Create a header-only library\n\n# Build the project\ncforge build\n\n# Run the executable (for application projects)\ncforge run \n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-project-structure",children:"Example Project Structure"}),"\n",(0,i.jsxs)(n.p,{children:["After initializing a project with ",(0,i.jsx)(n.code,{children:"cforge init"}),", you'll have a structure like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"myproject/\n\u251c\u2500\u2500 cforge.toml         # Project configuration\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 main.cpp        # Main source file\n\u251c\u2500\u2500 include/            # Header files\n\u251c\u2500\u2500 scripts/            # Custom scripts\n\u2514\u2500\u2500 build/              # Build artifacts (generated)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-c-code",children:"Example C++ Code"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"src/main.cpp"})," (generated automatically):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:' #include <iostream>\n\nint main(int argc, char* argv[]) {\n    std::cout << "Hello, cforge!" << std::endl;\n    return 0;\n} \n'})}),"\n",(0,i.jsx)(n.h3,{id:"build-and-run",children:"Build and Run"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ cforge build\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           cforge - C/C++ Build System            \u2502\n\u2502                    v1.2.0                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nBuilding: myproject\n[1/4] Checking build tools\nChecking for required build tools...\nCMake: \u2713\nCompiler 'clang': \u2713\nBuild generator 'Ninja': \u2713\nvcpkg: \u2713 (will be configured during build)\nAll required build tools are available.\n\n[2/4] Configuring project\nProject configured with generator: Ninja (Debug)\n\n[3/4] Running pre-build hooks\nRunning pre-build hooks\nRunning hook: echo Starting build process...\nStarting build process...\n\n[4/4] Building project\nBuilding myproject in Debug configuration\n\u2713 Compiling 1 source files (completed in 1.2s)\n\n\u2713 Build completed successfully\n\n$ cforge run\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           cforge - C/C++ Build System            \u2502\n\u2502                    v1.2.0                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nRunning: myproject\nFound executable: build/bin/myproject\nRunning: build/bin/myproject\n\nProgram Output\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nHello, cforge!\n\n\u2713 Program executed successfully \n"})})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},c=r.createContext(i);function o(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);