"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[114],{703:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"dependencies","title":"Working with Dependencies","description":"\ud83d\udce6 Working with Dependencies","source":"@site/docs/dependencies.md","sourceDirName":".","slug":"/dependencies","permalink":"/cforge/docs/dependencies","draft":false,"unlisted":false,"editUrl":"https://github.com/chasesunstrom/cforge/edit/main/docs/docs/dependencies.md","tags":[],"version":"current","frontMatter":{"id":"dependencies","title":"Working with Dependencies"},"sidebar":"sidebar","previous":{"title":"Project Configuration","permalink":"/cforge/docs/project-configuration"},"next":{"title":"Workspaces","permalink":"/cforge/docs/workspaces"}}');var t=r(4848),s=r(8453);const c={id:"dependencies",title:"Working with Dependencies"},d=void 0,o={},a=[{value:"\ud83d\udce6 Working with Dependencies",id:"-working-with-dependencies",level:2},{value:"vcpkg Integration",id:"vcpkg-integration",level:3},{value:"Conan Integration",id:"conan-integration",level:3},{value:"Git Dependencies",id:"git-dependencies",level:3},{value:"Custom Dependencies",id:"custom-dependencies",level:3},{value:"System Dependencies",id:"system-dependencies",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"-working-with-dependencies",children:"\ud83d\udce6 Working with Dependencies"}),"\n",(0,t.jsx)(n.p,{children:"CForge supports multiple dependency management systems:"}),"\n",(0,t.jsx)(n.h3,{id:"vcpkg-integration",children:"vcpkg Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[dependencies.vcpkg]\r\nenabled = true\r\npath = "~/.vcpkg"  # Optional, defaults to ~/.vcpkg\r\npackages = ["fmt", "boost", "nlohmann-json"] \n'})}),"\n",(0,t.jsx)(n.p,{children:"Example C++ code using vcpkg dependencies:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <fmt/core.h>\r\n#include <nlohmann/json.hpp>\r\n\r\nint main() {\r\n    // Using fmt library from vcpkg\r\n    fmt::print("Hello, {}!\\n", "world");\r\n    \r\n    // Using nlohmann/json library from vcpkg\r\n    nlohmann::json j = {\r\n        {"name", "CForge"},\r\n        {"version", "1.2.0"}\r\n    };\r\n    \r\n    fmt::print("JSON: {}\\n", j.dump(2));\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(n.h3,{id:"conan-integration",children:"Conan Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[dependencies.conan]\r\nenabled = true\r\npackages = ["fmt/9.1.0", "spdlog/1.10.0"]\r\noptions = { "fmt:shared": "False", "spdlog:shared": "False" }\r\ngenerators = ["cmake", "cmake_find_package"] \n'})}),"\n",(0,t.jsx)(n.h3,{id:"git-dependencies",children:"Git Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[[dependencies.git]]\r\nname = "nlohmann_json"\r\nurl = "https://github.com/nlohmann/json.git"\r\ntag = "v3.11.3"\r\n# Optional settings\r\nshallow = true  # Faster clone with reduced history\r\nupdate = false  # Whether to update the repo on builds\r\n\r\n[[dependencies.git]]\r\nname = "fmt"\r\nurl = "https://github.com/fmtlib/fmt.git"\r\ntag = "9.1.0"\r\ncmake_options = ["-DFMT_TEST=OFF", "-DFMT_DOC=OFF"]  # Pass CMake options when building\r\n\r\n[[dependencies.git]]\r\nname = "imgui"\r\nurl = "https://github.com/ocornut/imgui.git"\r\nbranch = "master"  # Use a specific branch instead of tag\r\nshallow = true\r\n\r\n[[dependencies.git]]\r\nname = "custom_repo"\r\nurl = "https://example.com/repo.git"\r\ncommit = "abc123def456"  # Use a specific commit hash \n'})}),"\n",(0,t.jsx)(n.p,{children:"Git dependencies are automatically cloned into a deps directory. The libraries can be included in your project by adding their include paths to your target configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[targets.default]\r\ninclude_dirs = ["include", "deps/nlohmann_json/single_include", "deps/fmt/include"]\r\ndefines = ["FMT_HEADER_ONLY"]  # Optionally add defines for your dependencies \n'})}),"\n",(0,t.jsx)(n.p,{children:"You can also use the libraries in your code immediately:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <nlohmann/json.hpp>\r\n#include <fmt/core.h>\r\n\r\nint main() {\r\n    // Using nlohmann/json\r\n    nlohmann::json obj = {{"name", "cforge"}, {"version", "1.4.0"}};\r\n    \r\n    // Using fmt\r\n    fmt::print("Project: {}\\n", obj["name"].get<std::string>());\r\n    return 0;\r\n} \n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-dependencies",children:"Custom Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[[dependencies.custom]]\r\nname = "my_library"\r\nurl = "https://example.com/my_library-1.0.0.zip"\r\ninclude_path = "include"\r\nlibrary_path = "lib" \n'})}),"\n",(0,t.jsx)(n.h3,{id:"system-dependencies",children:"System Dependencies"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[dependencies]\r\nsystem = ["X11", "pthread", "dl"] \n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>d});var i=r(6540);const t={},s=i.createContext(t);function c(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);