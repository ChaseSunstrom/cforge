# CMakeLists.txt for hi2 v0.1.0
# Generated by cforge - C++ project management tool

cmake_minimum_required(VERSION 3.14)

# Project configuration
project(hi2 VERSION 0.1.0 LANGUAGES CXX)

# Project description
set(PROJECT_DESCRIPTION "A C++ project created with cforge")
set(PROJECT_AUTHOR "Your Name <your.email@example.com>")

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Build configurations
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

message(STATUS "Building with ${CMAKE_BUILD_TYPE} configuration")

# Set output directories
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Git dependencies
include(FetchContent)
# Ensure dependencies directory exists
set(DEPS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/deps")
file(MAKE_DIRECTORY ${DEPS_DIR})

# spdlog dependency
message(STATUS "Setting up spdlog dependency from https://github.com/gabime/spdlog.git")
FetchContent_Declare(spdlog
    SOURCE_DIR ${DEPS_DIR}/spdlog
)
# Include directories for spdlog
include_directories(${DEPS_DIR}/spdlog/include)
include_directories(${DEPS_DIR}/spdlog/.)

# For spdlog, configure options
set(SPDLOG_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(SPDLOG_BUILD_TESTS OFF CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(spdlog)

find_package(Threads REQUIRED)
# Add source files
file(GLOB_RECURSE SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/*.c
    ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cc
    ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cxx
)

# Define target name
set(TARGET_NAME ${PROJECT_NAME})

# Create executable
add_executable(${TARGET_NAME} ${SOURCES})
set(PROJECT_TYPE "executable")


# Target configuration
target_include_directories(${TARGET_NAME} PRIVATE
    ${DEPS_DIR}
    include
    deps/spdlog/include
    deps/spdlog
    ${DEPS_DIR}/spdlog
    ${DEPS_DIR}/spdlog/include
)

# Link libraries
target_link_libraries(${TARGET_NAME} PRIVATE
    ${CMAKE_THREAD_LIBS_INIT}
    spdlog::spdlog
)

# Enable compiler warnings
if(MSVC)
    target_compile_options(${TARGET_NAME} PRIVATE /W4 /MP)
else()
    target_compile_options(${TARGET_NAME} PRIVATE -Wall -Wextra -Wpedantic)
endif()

# Add configuration-specific defines
# Debug defines
target_compile_definitions(${TARGET_NAME} PRIVATE $<$<CONFIG:Debug>:DEBUG=1;ENABLE_LOGGING=1>)
# Release defines
target_compile_definitions(${TARGET_NAME} PRIVATE $<$<CONFIG:Release>:NDEBUG=1>)

# Set output names for different configurations
set_target_properties(${TARGET_NAME} PROPERTIES
    OUTPUT_NAME_DEBUG "${PROJECT_NAME}_debug"
    OUTPUT_NAME_RELEASE "${PROJECT_NAME}_release"
    OUTPUT_NAME_RELWITHDEBINFO "${PROJECT_NAME}_relwithdebinfo"
    OUTPUT_NAME_MINSIZEREL "${PROJECT_NAME}_minsizerel"
)

# Installation
include(GNUInstallDirs)
if(PROJECT_TYPE STREQUAL "executable")
    install(TARGETS ${TARGET_NAME}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )
else()
    install(TARGETS ${TARGET_NAME}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )
    # Install headers
    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN "*.h" PATTERN "*.hpp"
    )
endif()

# Packaging with CPack
include(CPack)
set(CPACK_PACKAGE_NAME ${PROJECT_NAME})
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_VENDOR "Your Organization")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A C++ project created with cforge")
# OS specific packaging settings
if(WIN32)
    set(CPACK_GENERATOR "ZIP;NSIS")
elseif(APPLE)
    set(CPACK_GENERATOR "TGZ;DragNDrop")
else()
    set(CPACK_GENERATOR "TGZ;DEB")
endif()
